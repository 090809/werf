---
artifact: binary_assets
from: ubuntu:16.04
ansible:
  beforeInstall:
  - raw: apt-get update -q
  - raw: apt-get -y install curl ca-certificates
  # get_url.attributes parameter requires bin chattr, lsattr on path. Is this attrs are used somewhere?
  - name: Download kubectl
    get_url:
      url: https://storage.googleapis.com/kubernetes-release/release/v1.7.7/bin/linux/amd64/kubectl
      dest: /kubectl
      mode: 0755

  # download archive, extract file, delete
  # TODO convert to block with helm-v2.5.0-linux-amd64.tar.gz as item
  #run 'curl -LsO https://storage.googleapis.com/kubernetes-helm/helm-v2.5.0-linux-amd64.tar.gz'
  #run 'tar zxf helm-v2.5.0-linux-amd64.tar.gz'
  #run 'chmod +x linux-amd64/helm'
  - name: create temp file for helm archive
    tempfile:
      state: directory
      suffix: beforeInstall
    register: tmpdir
  - name: Download helm
    get_url:
      url: https://storage.googleapis.com/kubernetes-helm/helm-v2.5.0-linux-amd64.tar.gz
      dest: '{{`{{ tmpdir.path }}`}}/helm.tgz'
  - name: Extract helm
    # unzip and zipinfo requires for zip (zipinfo - no, unzip in alpine only)
    # gtar or tar for tgz, tar.gz (ubuntu, alpine ok)
    unarchive:
      remote_src: yes
      src: '{{`{{ tmpdir.path }}`}}/helm.tgz'
      dest: '{{`{{ tmpdir.path }}`}}'
  - name: Move helm to /
    copy:
      remote_src: yes
      src: '{{`{{ tmpdir.path }}`}}/linux-amd64/helm'
      dest: /helm
      mode: 0755
  # redundant task for execute file module
  - name: remove tmp
    file:
      path: '{{`{{ tmpdir.path }}`}}'
      state: absent

  - name: Install ca-certificates
    apt:
      name: ca-certificates

---
{{ $TMPLPASS := "pas sFromT empltae" }}
# DAPP_BIN_DAPPFILE_YML=path-to/dappfile-yml bundle exec dapp dimg build --dir=playground/ansible-test
dimg: alp
from: alpine:latest
ansible:
  beforeInstall:
  #- raw: da
  #- raw: /bin/ash -lec "for i in 1 2 3 4 5; do date ; sleep 1 ; done"
  - raw: |
      echo live stdout example
      for i in 1 2 3 4 5; do
        date
        sleep 1
      done
      echo Мой пароль из простой переменной $PASSWORD
      echo Мой пароль из шаблона $TMPLPASS
      echo Длина пароля {{`{{'${#PASSWORD} #}'}}`}}
      echo The end.
      sleep 0.1
    args:
      executable: PASSWORD=secretPass312 TMPLPASS="{{ $TMPLPASS }}" /bin/ash -le
  # curl можно не ставить, есть get_url
  # просто пример установки пакета
  - name: install curl
    apk: name=curl update_cache=yes
  - group:
      name: apache
      gid: 48
  - user:
      name: apache
      uid: 48
      group: apache
  - getent:
      database: passwd
      key: apache
  - debug: var=getent_passwd
    #    - apk:
    #        name: '{{"{{"}} item {{"}}"}}'
    #        update_cache: yes
    #      with_items:
    #        - curl
    #- raw: apk update
    #- raw: apk add curl
  - file:
      path: /game
      state: directory
      owner: games
  - raw: 'touch {{`{{ item }}`}}'
    become_user: games
    with_items:
    - '/game/test-file'
  - raw: ls -la /game/test-file
  - copy:
      src: /game/test-file
      dest: /game/test-file-2
    become_user: games
---
dimg: ubu
from: ubuntu:16.04
import:
  - artifact: binary_assets
    add: /kubectl
    to: /usr/bin/kubectl
    before: install
  - artifact: binary_assets
    add: /helm
    to: /usr/bin/helm
    before: install
# импорт директории не работет почему-то, пишет
#  copying artifact `binary_assets` ... ERROR: destination must be a directory when copying more than 1 file
# rsync error: errors selecting input/output files, dirs (code 3) at main.c(623) [Receiver=3.1.2]
# Artifact export failed (`binary_assets`): check artifact.export in Dappfile!
#  - artifact: binary_assets
#    add: /etc/ssl/certs
#    to: /etc/ssl/certs
#    before: install
ansible:
  beforeInstall:
  - name: install curl
    apt: name=curl update_cache=yes
  - group:
      name: apache
      gid: 48
  - user:
      name: apache
      uid: 48
      group: apache
  - getent:
      database: passwd
      key: apache
  - debug:
      var: getent_passwd
  - file:
      path: /etc/ssl/certs
      state: directory
      recurse: yes
  install:
  - name: find /etc/ssl/certs
    find:
      paths: /etc/ssl/certs
      recurse: yes
    register: ssl_certs
  - debug:
      var: ssl_certs
