package helm

import (
	"fmt"

	"github.com/spf13/cobra"

	"github.com/werf/logboek"
	"github.com/werf/logboek/pkg/level"

	"github.com/werf/werf/cmd/werf/common"
	helm_common "github.com/werf/werf/cmd/werf/helm/common"
	"github.com/werf/werf/pkg/deploy"
	"github.com/werf/werf/pkg/docker"
	"github.com/werf/werf/pkg/image"
	"github.com/werf/werf/pkg/ssh_agent"
	"github.com/werf/werf/pkg/true_git"
	"github.com/werf/werf/pkg/util"
	"github.com/werf/werf/pkg/werf"
)

var getAutogeneratedValues common.CmdData

func NewGetAutogeneratedValuesCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "get-autogenerated-values",
		Short: "Get service values yaml generated by werf for helm chart during deploy",
		Long: common.GetLongCommandDescription(`Get service values generated by werf for helm chart during deploy.

These values includes project name, docker images ids and other`),
		DisableFlagsInUseLine: true,
		Annotations: map[string]string{
			common.CmdEnvAnno: common.EnvsDescription(common.WerfSecretKey),
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			if err := common.ProcessLogOptions(&getAutogeneratedValues); err != nil {
				common.PrintHelp(cmd)
				return err
			}

			return runGetServiceValues()
		},
	}

	common.SetupDir(&getAutogeneratedValues, cmd)
	common.SetupConfigPath(&getAutogeneratedValues, cmd)
	common.SetupConfigTemplatesDir(&getAutogeneratedValues, cmd)
	common.SetupTmpDir(&getAutogeneratedValues, cmd)
	common.SetupHomeDir(&getAutogeneratedValues, cmd)
	common.SetupSSHKey(&getAutogeneratedValues, cmd)

	common.SetupEnvironment(&getAutogeneratedValues, cmd)
	common.SetupNamespace(&getAutogeneratedValues, cmd)

	common.SetupDockerConfig(&commonCmdData, cmd, "Command needs granted permissions to read and pull images from the specified stages storage and images repo")
	common.SetupInsecureRegistry(&commonCmdData, cmd)
	common.SetupSkipTlsVerifyRegistry(&commonCmdData, cmd)

	common.SetupLogOptions(&getAutogeneratedValues, cmd)

	return cmd
}

func runGetServiceValues() error {
	logboek.SetAcceptedLevel(level.Error)

	ctx := common.BackgroundContext()

	if err := werf.Init(*getAutogeneratedValues.TmpDir, *getAutogeneratedValues.HomeDir); err != nil {
		return fmt.Errorf("initialization error: %s", err)
	}

	if err := image.Init(); err != nil {
		return err
	}

	if err := true_git.Init(true_git.Options{LiveGitOutput: *getAutogeneratedValues.LogVerbose || *getAutogeneratedValues.LogDebug}); err != nil {
		return err
	}

	if err := common.DockerRegistryInit(&getAutogeneratedValues); err != nil {
		return err
	}

	if err := docker.Init(ctx, *getAutogeneratedValues.DockerConfig, *getAutogeneratedValues.LogVerbose, *getAutogeneratedValues.LogDebug); err != nil {
		return err
	}

	ctxWithDockerCli, err := docker.NewContext(ctx)
	if err != nil {
		return err
	}
	ctx = ctxWithDockerCli

	projectDir, err := common.GetProjectDir(&getAutogeneratedValues)
	if err != nil {
		return fmt.Errorf("getting project dir failed: %s", err)
	}

	werfConfig, err := common.GetRequiredWerfConfig(ctx, projectDir, &getAutogeneratedValues, false)
	if err != nil {
		return fmt.Errorf("unable to load werf config: %s", err)
	}

	projectName := werfConfig.Meta.Project

	environment := helm_common.GetEnvironmentOrStub(*commonCmdData.Environment)

	namespace, err := common.GetKubernetesNamespace(*getAutogeneratedValues.Namespace, environment, werfConfig)
	if err != nil {
		return err
	}

	if err := ssh_agent.Init(ctx, *getAutogeneratedValues.SSHKeys); err != nil {
		return fmt.Errorf("cannot initialize ssh agent: %s", err)
	}
	defer func() {
		err := ssh_agent.Terminate()
		if err != nil {
			logboek.Error().LogF("WARNING: ssh agent termination failed: %s\n", err)
		}
	}()

	imagesInfoGetters := common.StubImageInfoGetters(werfConfig)

	serviceValues, err := deploy.GetServiceValues(ctx, projectName, common.StubRepoAddress, namespace, imagesInfoGetters, deploy.ServiceValuesOptions{Env: environment})
	if err != nil {
		return fmt.Errorf("error creating service values: %s", err)
	}

	fmt.Printf("%s", util.DumpYaml(serviceValues))

	return nil
}
