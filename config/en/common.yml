en:
  common:
    image:
      signature: "signature: %{signature}"
      info:
        created_at: "date: %{value}"
        mb_size: "size: %{mb} MB"
        difference: "difference: %{mb} MB"
      commands: "commands:"
      instructions: "instructions:"
    container:
      launched_command: "Launched command: `%{command}`"
    process:
      artifact_copy: "copying artifact `%{name}`"
      artifact_building: "building artifact `%{name}`"
      git_artifact_clone: "cloning remote git_artifact `%{url}`"
      git_artifact_fetch: "fetching remote git_artifact `%{url}`"
      vendoring_builder_cookbooks: 'vendoring builder cookbooks'
      waiting_resouce_lock: "waiting for locked resource `%{name}`"
      gitartifact_container_creating: 'creating dappdeps/gitartifact container'
      base_container_creating: 'creating dappdeps/base container'
      chefdk_container_creating: 'creating dappdeps/chefdk container'
      image_pull: "pulling image `%{name}`"
      image_push: "pushing image `%{name}`"
      image_save: "saving image `%{name}`"
    status:
      process:
        pushing: '[PUSHING]'
        pulling: '[PULLING]'
        building: '[BUILDING]'
        default: '[RUNNING]'
        tagging: '[TAGGING]'
      success:
        default: '[OK]'
      failed:
        not_pulled: '[NOT PULLED]'
        default: '[FAILED]'
    state:
      using_cache: '[USING CACHE]'
      not_present: '[NOT PRESENT]'
      build: '[BUILD]'
      empty: '[EMPTY]'
      push: '[PUSH]'
      pull: '[PULL]'
      tag: '[TAG]'
    warning:
      wrong_using_base_directive: "WARNING: Directive `%{directive}` has declared after dimg_group|dimg|artifact!"
      wrong_using_directive: "WARNING: Directive `%{directive}` has declared after dimg_group|dimg!"
      excess_builder_instruction: "WARNING: Excessive use of the `builder` instruction. Builder type will be automatically determined by the first use of any builder."
      excess_name_instruction: "WARNING: Excessive use of the `name` instruction. Given name corresponds to default name."
      another_image_already_tagged: 'WARNING: image with other id already exist.'
      tag_ignored: "WARNING: tag `%{tag}` ignored."
      dimg_not_found_in_registry: "WARNING: Dimg not found in registry."
      stage_artifact_rewritten: "WARNING: Artifact stage rewritten from %{conflict_stage} to %{stage}."
      recipe_does_not_used: "WARNING: Recipe `%{recipe}` doesn't used in any stage."
      context_archive_not_found: "WARNING: context archive `%{path}` not found!"
      dapp_secret_key_not_found: "Secrets haven't decoded: set `DAPP_SECRET_KEY`!"
    group:
      install: 'Install group'
      setup: 'Setup group'
    stage:
      from: 'From'
      import_artifact: 'Import Artifact'
      before_install: 'Before install'
      before_install_artifact: 'Before install artifact'
      g_a_archive_dependencies: 'Git artifacts dependencies'
      g_a_archive: 'Git artifacts: create archive'
      install:
        g_a_pre_install_patch_dependencies: 'Git artifacts dependencies'
        g_a_pre_install_patch: 'Git artifacts: apply patches (before install)'
        install: 'Install'
        g_a_post_install_patch_dependencies: 'Git artifacts dependencies'
        g_a_post_install_patch: 'Git artifacts: apply patches (after install)'
      after_install_artifact: 'After install artifact'
      before_setup: 'Before setup'
      before_setup_artifact: 'Before setup artifact'
      setup:
        g_a_pre_setup_patch_dependencies: 'Git artifacts dependencies'
        g_a_pre_setup_patch: 'Git artifacts: apply patches (before setup)'
        setup: 'Setup'
        g_a_post_setup_patch_dependencies: 'Git artifacts dependencies'
        g_a_post_setup_patch: 'Git artifacts: apply patches (after setup)'
      after_setup_artifact: 'After setup artifact'
      g_a_latest_patch: 'Git artifacts: latest patch'
      docker_instructions: 'Docker instructions'
      g_a_artifact_patch: 'Git artifacts: artifact patch'
      build_artifact: 'Build artifact'
